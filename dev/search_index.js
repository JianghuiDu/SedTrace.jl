var documenterSearchIndex = {"docs":
[{"location":"guide/#User-Guide","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"In this page we briefly discuss how to use SedTrace to generate and run diagenetic models.","category":"page"},{"location":"guide/#Workflow","page":"User Guide","title":"Workflow","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The workflow of using SedTrace to generate and run diagenetic models is shown in the following figure. We will discuss each step in the sections below. (Image: SedTrace workflow)","category":"page"},{"location":"guide/#Excel-input","page":"User Guide","title":"Excel input","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"To generate code for the model user supplies an Excel file model_config.xlsx to SedTrace, including the following spreadsheets. The substances sheet lists the modelled substances, their types (e.g., solid or dissolved), chemical formula and boundary conditions. The reactions sheet lists the reactions, their chemical equations and rate expressions. The speciation sheet lists aqueous speciation reactions. The adsorption sheet lists the adsorbed species. The diffusion sheet  lists information to compute the diffusion coefficients of dissolved substances. The parameters sheet lists the parameters required by the model. The output sheet  is used to formulate output and plotting. The data sheet  includes observational data that will be plotted together with model outputs. The speciation, adsorption and data sheets are optional and can be left empty if not needed (but their column headers must be included).","category":"page"},{"location":"guide/#Julia-code","page":"User Guide","title":"Julia code","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The code generated by SedTrace is assembled into 5 Julia scripts: parm.jl and parm.struct.jl containing the model parameters, cache.jl containing the model cache, reactran.jl containing the reactive-transport code, and jactype.jl containing the sparsity pattern of the Jacobian. ","category":"page"},{"location":"guide/#Model-simulation","page":"User Guide","title":"Model simulation","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The workflow in main.jl begins with configuring the model using modelconfig = ModelConfig(modeldirectory, modelfile, modelname), supplying information of model directory, the excel file and model name. If needed the user can call generate_parameter_template(modelconfig;EnableList::Dictionary), which parses the substances, reactions, speciation and adsorption sheets to identify which parameters are needed by the model and output a template to assist the creation of the parameters sheet. Once the complete model configuration file is created, code generation is done by calling generate_code(modelconfig; ParamDict::Dictionary, EnableList::Dictionary), creating the 5 Julia files discussed above. \n","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"To assist easy model development, each of the spreadsheets in model_config.xlsx has a column :include, and setting its value to 1 means the corresponding row will be used by SedTrace to create the model. The argument EnableList helps the user to choose which information in the sheets should be included. Use EnableList = Dict(\"sheetname\"=>[\"row1\",\"row2\",...]) to include row1, row2 etc. from the spreadsheet sheetname in the model. Similarly, ParamDict helps the user to change parameter values easily without modifying the excel sheet. ParamDict = Dict(\"parameter_name\"=>\"parameter_value\") will change the value of parameter_name from the default value in the parameters sheet to parameter_value when generating code. The idea is that once the excel sheets are created the user should avoid modifying them, which is both inconvenient and potentially error-prone. Instead changes of the model information should be done using EnableList and ParamDict inside main.jl, which allows quick sensitive test and model prototyping. \n","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The Julia code files generated by SedTrace needs to be loaded into the workspace module Main by calling IncludeFiles(modelconfig). The parameters are loaded into the module Param, and the cache and ODE function are loaded into the module Cache. During code generation, SedTrace collects the results of parsing the Excel inputs and outputs a file model_parsing_diagnostics.xlsx, which can help the user to diagnose potential issues of code generation.\n","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"In the next step the users initializes the initial values, parameters, ODE function and Jacobian pattern. Internally SedTrace generates a set of initial values C0 = Param.C0 that are constant with respect to depth based on user supplied boundary conditions. The user can also supply their own initial values for example using the output from previous model runs. The parameters are initialized by parm = Param.ParamStruct(). The ODE function is initialized using OdeFun = Cache.init(C0, parm.Ngrid). The Jacobian sparsity pattern is initialized by JacPrototype = JacType(Param.IDdict), where IDdict is a Julia Dictionary that stores the indices of the model substances. \n","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"SedTrace also provides functions for code testing. Function TestJacobian(JacPrototype, OdeFun, parm) computes the Jacobian assuming it is dense, which is time consuming but accurate. The result is then compared with the Jacobian computed using JacPrototype. This thus serves as a check on code generation. BenchmarkJacobian(JacPrototype, OdeFun, parm), BenchmarkReactran(OdeFun, C0, parm), BenchmarkPreconditioner(JacPrototype, OdeFun, parm) are used to benchmark the performance and memory allocations of the Jacobian, ODE and preconditioner functions respectively.\n","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"The user configures the numerical solver using solverconfig = SolverConfig(:method, :preconditioner, prec_side), where :method is the numerical method such as :GMRES, :preconditioner is the name of the preconditioner, such as :ILU0, and prec_side controls whether it is left (1) or right (2) preconditioning. The numerical solution is configured using solutionconfig = SolutionConfig(C0, tspan, reltol, abstol; callback) to set the initial values (C0), the time span (tspan), and the tolerance (reltol for relative tolerance and abstol for absolute tolerance) for tests of numerical convergence. Any callback function compatible with the DifferentialEquations.jl can be supplied too. For example, the user can use callback = TerminateSteadyState(rtol, atol) from the DiffEqCallbacks.jl library to terminate the simulation once steady-state is reached given the relative and absolute tolerance levels of the derivatives (rtol  and atol). \n","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Model simulation is performed by calling solution = modelrun(OdeFun, parm, JacPrototype, solverconfig ,solutionconfig). Internally SedTrace creates the Jacobian, solver and preconditioner functions and format the ODE function to be compatible with DifferentialEquations.jl, which carries out the numerical solution.\n","category":"page"},{"location":"guide/#Model-output","page":"User Guide","title":"Model output","text":"","category":"section"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"Model outputs are created by calling generate_output(modelconfig, solution; site=nothing, showplt=true, saveplt=false). SedTrace will compute the output variables listed in the output sheet. New variables can be computed by supplying their mathematical expressions as functions of the model substances in the expression column. SedTrace also converts the default units to units specified by the user in the unit_profile column, using the conversion factors in the conversion_profile column. SedTrace can also computes the benthic fluxes of the output variables at the SWI. This is enables by set the flux_top column to 1. Similar to the model profiles, unit conversion for the flux is done using the conversion_flux and unit_flux columns. ","category":"page"},{"location":"guide/","page":"User Guide","title":"User Guide","text":"SedTrace then plots the profiles and the fluxes of the output variables. The user can supply the measured sediment profiles of these variables in the data sheet and the fluxes in the flux_top_measured column in the output sheet. SedTrace will plot the data with the model output. To do so the user needs to specify the site name in the site column and supply this name to generate_output. The name of the substance and the unit in the data sheet must match exactly those in the output sheet for SedTrace to match the model results with measurements. Data at measured depth intervals are supplied to the depth and value columns, with optional error values that will be used to create error bars on the plots. SedTrace will save the output in model_output.xlsx, containing direct output of modelled substances (sheet Substances), reaction rates (ReacRates), saturation state (Omega), pH related species (pHspecies), speciation results (Speciation) and intermediate variables (IntermediateVar) in the default SedTrace units. The user specified output is inside the OutputProfile and OutputFlux sheets with the custom units. If saveplt = true SedTrace will save the plots in the plots directory inside modeldirectory.","category":"page"},{"location":"examples/SimpleFe/#SimpleFe","page":"SimpleFe","title":"SimpleFe","text":"","category":"section"},{"location":"examples/Analytical/#pHBB1991","page":"pHBB1991","title":"pHBB1991","text":"","category":"section"},{"location":"examples/Analytical/#substances-sheet","page":"pHBB1991","title":"substances sheet","text":"","category":"section"},{"location":"examples/Analytical/","page":"pHBB1991","title":"pHBB1991","text":"include substance type formula top_bc_type bot_bc_type\n1 O2 dissolved  Dirichlet Dirichlet\n1 H dissolved_pH  Dirichlet Dirichlet\n1 TCO2 dissolved_pH  Dirichlet Dirichlet\n1 TH2S dissolved_pH  Dirichlet Dirichlet\n1 TH3BO3 dissolved_pH  Dirichlet Dirichlet","category":"page"},{"location":"examples/Analytical/#reactions-sheet","page":"pHBB1991","title":"reactions sheet","text":"","category":"section"},{"location":"examples/Analytical/","page":"pHBB1991","title":"pHBB1991","text":"include check label equation rate Omega\n1 1 ROS HS{-} + 2*O2 = H{+} + SO4{2-} kOS*exp(-a*(x-x0)^2) ","category":"page"},{"location":"examples/Analytical/#parameters-sheet","page":"pHBB1991","title":"parameters sheet","text":"","category":"section"},{"location":"examples/Analytical/","page":"pHBB1991","title":"pHBB1991","text":"include class type parameter value unit comment\n1 global const depth 0 m water depth\n1 global const salinity 20 psu bottom water salinity\n1 global const temp 20 Celsius bottom water temperature\n1 global const ds_rho 2.6 g cm^-3 dry sediment density\n1 grid const L 0.2 cm model sediment section thickness\n1 grid const Ngrid 200 integer number of model grid\n1 grid const b 2  parameter in gridtran\n1 grid const A 1/2b*log((1+(exp(b)-1)*0.055/L)/(1+(exp(-b)-1)*0.055/L))  parameter in gridtran\n1 grid function gridtran 0.055*(1+sinh(b*(x/L-A))/sinh(b*A))-0.05 cm grid transformation function\n1 porosity function phi 0.9999 dimensionless porosity as a function of depth\n1 porosity const phi_Inf 0.9999 dimensionless porosity at burial depth\n1 burial const Fsed 1.00E-06 g cm^-2 yr^-1 total sediment flux\n1 bioturbation function Dbt 0 cm^2/yr bioburbation coefficient as a function of depth\n1 bioirrigation function Dbir 0 yr^-1 bioirrigation coefficient as a function of depth\n1 BoundaryCondition const O20 2.50E-04 mmol cm^-3 Concentration of O2 at the TOP of sediment column\n1 BoundaryCondition const O2L 0.00E+00 mmol cm^-3 Concentration of O2 at the BOTTOM of sediment column\n1 BoundaryCondition const pH0 8.15 free pH scale pH at the TOP of sediment column\n1 BoundaryCondition const pHL 7.39 free pH scale pH at the BOTTOM of sediment column\n1 BoundaryCondition const TCO20 2.00E-03 mmol cm^-3 Concentration of TCO2 at the TOP of sediment column\n1 BoundaryCondition const TCO2L 2.00E-03 mmol cm^-3 Concentration of TCO2 at the BOTTOM of sediment column\n1 BoundaryCondition const TH2S0 0 mmol cm^-3 Concentration of TH2S at the TOP of sediment column\n1 BoundaryCondition const TH2SL 3.83E-04 mmol cm^-3 Concentration of TH2S at the BOTTOM of sediment column\n1 BoundaryCondition const TH3BO30 4.90E-05 mmol cm^-3 Concentration of TH3BO3 at the TOP of sediment column\n1 BoundaryCondition const TH3BO3L 4.90E-05 mmol cm^-3 Concentration of TH3BO3 at the BOTTOM of sediment column\n1 Reaction const a 1.00E+04 cm \n1 Reaction const x0 5.00E-03 cm \n1 Reaction const kOS 1.00E+00 mmol cm^-3 yr^-1 ","category":"page"},{"location":"examples/Analytical/","page":"pHBB1991","title":"pHBB1991","text":"Here we discuss the model pHBB1991. Boudreau (1991) created a diagenetic model with analytical solution to explain the pH change across the mat of sulfur oxidizing bacteria Beggiatoa in sediments from the Danish lagoons (Jørgensen and Revsbech, 1983). This model is now generated here using SedTrace. It includes one reaction, the oxidation of HS^- by O_2. The kinetic rate is k_OSe^-a(x-x_0 )^2⁡, where k_OS is the rate constant, x is depth. The reaction is assumed to happen close to the mat at x_0=0005 cm where dissolved O_2 disappears and H_2S starts to increase, and a controls the sharpness of this interface. The model substances are dissolved O_2, H^+ and the EIs TCO_2, TH_2S and TH_3BO_3. Their Dirichlet boundary conditions are specified at the top (-0.05 cm) and bottom (0.15 cm) of the model domain. Porosity is assumed to be constant and equal to 1 and thus no distinction is made between seawater above the SWI and the pore water below. The only transport mechanism is molecular diffusion. ","category":"page"},{"location":"examples/Analytical/","page":"pHBB1991","title":"pHBB1991","text":"The gridtran for the non-uniform grid is constructed using hyperbolic functions:","category":"page"},{"location":"examples/Analytical/","page":"pHBB1991","title":"pHBB1991","text":"gridtran(x)=(x_0+005)(1+dfracsinh(b(xL-A))sinh(bA))-005  A=dfrac12b  lndfrac1+(e^b-1)(x_0+005)L1+(e^-b-1)(x_0+005)L","category":"page"},{"location":"examples/Analytical/","page":"pHBB1991","title":"pHBB1991","text":"where L = 02 cm is the length of the model domain and 0.05 cm is the depth offset. The resulting grid points are concentrated near x_0 = 0005 cm, the degree of which is controlled by b. ","category":"page"},{"location":"examples/SBB/#SBB","page":"SBB","title":"SBB","text":"","category":"section"},{"location":"examples/SBB/","page":"SBB","title":"SBB","text":"Santa Barbara Basin (SBB) is one of the California borderland basins. Its seasonally anoxic condition leads to organic rich and laminated sediments (Reimers et al., 1996). SBB is among the most studied location for sediment diagenesis, and has perhaps one of the most complete pore water dataset to offer in literature (Reimers et al., 1996). High equality pH measurements by in situ profiling micro-electrode, and the availability of various TEI data makes it ideal for benchmarking digenetic models (Meysman et al., 2003). Using SedTrace, we generate a diagenetic model for SBB that includes sediment biogeochemistry, pH and Mo cycling. This example is included in the /examples/SBB folder.","category":"page"},{"location":"examples/SBB/","page":"SBB","title":"SBB","text":"The biogeochemical reaction network includes the classic redox sequence of aerobic respiration, denitrification, Mn and Fe reduction, sulfate reduction and methanogenesis. We use the continuous model of POC reactivity (Boudreau et al., 2008), where the reaction rate depends on sediment age. The model also includes secondary redox reactions, and the authigenesis of carbonates, sulfide, opal and carbonate fluroapatite (CFA). The adsorption of NH4+, Fe^2+ and Mn^2+ are treated using the linear isothermal. To model pH, we include the following equilibrium invariants: TCO_2,  TH_2S, THSO_4, TH_3BO_3, TH_3PO_4 and THF.","category":"page"},{"location":"examples/SBB/","page":"SBB","title":"SBB","text":"Molybdenum is sensitive to sedimentary redox condition, and its stable isotope composition, expressed as δ^98 Mo=(((^98)Mo/〖(^95)Mo〗sample)/((^98)Mo/〖(^95)Mo〗standard )-1)×〖10〗^3  +0.25, where NIST SRM-3134 is the commonly used standard and its δ98Mo is 0.25 ‰ by convention, is an important proxy to study past ocean deoxygenation (Kendall et al., 2017). SBB provides a useful analogy for anoxic ocean and modelling the sedimentary Mo cycle here may help understand how the δ98Mo works as a redox proxy. Here we show a test model of Mo diagenesis in SBB to demonstrate the capability of SedTrace for modelling stable isotope fractionation, complementing the radiogenic isotope example above.","category":"page"},{"location":"examples/SBB/","page":"SBB","title":"SBB","text":"In this model, we consider 5 dissolved Mo species, MoO42- and 4 thiomolybdate species (Erickson and Helz, 2000):  MoO4^(2-)+〖iH〗2 S=MoO(4-i) Si^(2-)+〖iH〗2 O (i=1 to 4),Ki=([MoO(4-i) Si^(2-)])/([MoO4^(2-) ][H2 〖S]〗^i ),\t\t\t\t(54) Ki are the apparent equilibrium constants. We assume the only the tetrathiomolybdate species can be removed by scavenging, due to high affinity with particulate surface: RMoremoval=krm [MoS4^(2-)] .\t\t\t\t\t\t\t\t\t\t(55)","category":"page"},{"location":"examples/SBB/","page":"SBB","title":"SBB","text":"We include 98Mo (Moh) and 95Mo (Mol) as two tracers. We assume that equilibrium isotope fractionation is induced during thiolation: 〖αi^(98/95)=(^98)MoO4^(2-) /(^95)MoO4^(2-)  /(^98)MoO(4-i) Si^(2-) /(^95)MoO(4-i) Si^(2-)  =K〗i^98/Ki^95,\t\t\t\t\t\t\t\t(56)  αi^(98/95) are the fractionation factor, which are 1.0014, 1.0028, 1.00455 and 1.0063 for i = 1 to 4 respectively estimated by ab initio calculation (Tossell, 2005) and recalculated by Kendall et al., (2017). In SedTrace, we add Eq. (54) to the speciation sheet, choosing MoO42- as the base species. Presently SedTrace does not provide special treatment of isotope fractionation, the user needs to incorporate the fractionation factor in the parameters (e.g., Ki) before supplying it to SedTrace. We use the constants from Erickson and Helz (2000) as Ki^95 and then multiply them by αi^(98/95) to get Ki^98. In this test model we do not consider kinetic isotope fractionation, i.e., using the same k_rm and diffusion coefficient for the two isotopes. We assume the bottom water δ98Mo is the same as the seawater which is globally uniform at 2.34 ‰ (Kendall et al., 2017). The only source of authigenic Mo accumulation is pore water Mo removal supported by diffusion of seawater into sediment. In the model we also supply a lithogenic Mo flux that accounts for the reported 2 ppm lithogenic Mo in sediments (Zheng et al., 2000). The lithogenic δ98Mo is assumed to be the same as the Upper Continental Crust (UCC) ~0.3 ‰ (Kendall et al., 2017).","category":"page"},{"location":"Examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"#SedTrace.jl","page":"Home","title":"SedTrace.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A package for generating and running reactive-transport models of marine sediment diagenetic specializing in trace elements and isotopes.","category":"page"},{"location":"#Package-Introduction","page":"Home","title":"Package Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SedTrace is a modelling framework that automates the generation of Julia code for diagenetic models and provides high-performance computing tools to assist model simulation, only requiring the user to supply information based on a Microsoft Excel input file. SedTrace specializes in modelling TEIs, and can accommodate a wide range of custom pH and speciation modelling choices. The design principle is to give as much control to the user as possible when creating the model, such that SedTrace is only meant to help converting user ideas to code rather than making model decisions for the user.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The User Guide provides a tutorial explaining how to get started using SedTrace.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Some examples of generating diagenetic modles using SedTrace can be found on the Examples page.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Details of the model description can be found in our paper Du et al., (2022).","category":"page"}]
}
